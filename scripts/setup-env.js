#!/usr/bin/env node

/**
 * Environment Setup Script
 * This script helps create a basic .env.local file
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupEnvironment() {
  console.log('üöÄ Environment Setup Script');
  console.log('============================\n');
  
  const envPath = path.join(process.cwd(), '.env.local');
  
  if (fs.existsSync(envPath)) {
    const overwrite = await question('‚ö†Ô∏è  .env.local already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      console.log('‚ùå Setup cancelled.');
      rl.close();
      return;
    }
  }
  
  console.log('\nüìù Please provide your Supabase credentials:');
  console.log('(You can find these in your Supabase project dashboard > Settings > API)\n');
  
  const supabaseUrl = await question('üîó Supabase Project URL: ');
  const supabaseAnonKey = await question('üîë Supabase Anon Key: ');
  const serviceRoleKey = await question('üîê Service Role Key (optional): ');
  
  if (!supabaseUrl || !supabaseAnonKey) {
    console.log('‚ùå Supabase URL and Anon Key are required!');
    rl.close();
    return;
  }
  
  const envContent = `# ========================================
# üîê CONTRACT MANAGEMENT SYSTEM
# ========================================
# Generated by setup script on ${new Date().toISOString()}

# ========================================
# üåê APPLICATION CONFIGURATION
# ========================================

NODE_ENV=development
NEXT_PUBLIC_APP_ENV=development
NEXT_PUBLIC_APP_URL=http://localhost:3000

# ========================================
# üîë SUPABASE CONFIGURATION
# ========================================

NEXT_PUBLIC_SUPABASE_URL=${supabaseUrl}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${supabaseAnonKey}
${serviceRoleKey ? `SUPABASE_SERVICE_ROLE_KEY=${serviceRoleKey}` : '# SUPABASE_SERVICE_ROLE_KEY=your_service_role_key_here'}

# Auth Configuration
NEXT_PUBLIC_SUPABASE_AUTH_REDIRECT_URL=http://localhost:3000/auth/callback

# ========================================
# üîê SECURITY CONFIGURATION
# ========================================

# Disable RBAC temporarily for debugging
RBAC_ENFORCEMENT=false

# ========================================
# üöÄ API CONFIGURATION
# ========================================

NEXT_PUBLIC_API_URL=http://localhost:3000
NEXT_PUBLIC_SITE_URL=http://localhost:3000

# ========================================
# üß™ DEBUG CONFIGURATION
# ========================================

DEBUG=true
DEBUG_AUTH=true
DEBUG_API=true

# ========================================
# üåç INTERNATIONALIZATION
# ========================================

NEXT_PUBLIC_DEFAULT_LOCALE=en
NEXT_PUBLIC_SUPPORTED_LOCALES=en,ar,es,fr,de
NEXT_PUBLIC_FALLBACK_LOCALE=en

# ========================================
# üìã FEATURE FLAGS
# ========================================

NEXT_PUBLIC_FEATURE_AI_CONTRACTS=true
NEXT_PUBLIC_FEATURE_REAL_TIME_COLLABORATION=true
NEXT_PUBLIC_FEATURE_ADVANCED_ANALYTICS=true
NEXT_PUBLIC_FEATURE_MOBILE_APP=true
NEXT_PUBLIC_FEATURE_API_ACCESS=true
`;

  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ .env.local file created successfully!');
    console.log('\nüîß Next steps:');
    console.log('1. Restart your development server: npm run dev');
    console.log('2. Test the debug endpoint: http://localhost:3000/api/debug/auth');
    console.log('3. Try logging in to your application');
    console.log('\nüìñ If you encounter issues, see CRITICAL_ERROR_FIX_GUIDE.md');
  } catch (error) {
    console.log('‚ùå Error creating .env.local file:', error.message);
  }
  
  rl.close();
}

setupEnvironment().catch(console.error);