# Make.com Integration Setup Script for Windows
# Run this script in PowerShell to configure your Make.com integration

Write-Host "üîß Make.com Integration Setup" -ForegroundColor Magenta
Write-Host "================================" -ForegroundColor Cyan

# Check if .env.local exists
$envPath = Join-Path $PWD ".env.local"
if (-not (Test-Path $envPath)) {
    Write-Host "‚ùå .env.local file not found!" -ForegroundColor Red
    Write-Host "‚ÑπÔ∏è  Please create .env.local file first." -ForegroundColor Blue
    exit 1
}

Write-Host "‚úÖ Environment file found" -ForegroundColor Green

# Read environment variables
Write-Host "`nüìã Reading environment variables..." -ForegroundColor Cyan
$envContent = Get-Content $envPath -Raw
$envVars = @{}

$envContent -split "`n" | ForEach-Object {
    if ($_ -match "^([^=]+)=(.*)$") {
        $envVars[$matches[1].Trim()] = $matches[2].Trim()
    }
}

# Check required variables
$requiredVars = @(
    "MAKE_WEBHOOK_URL",
    "NEXT_PUBLIC_MAKE_WEBHOOK_URL", 
    "PDF_READY_WEBHOOK_URL",
    "NEXT_PUBLIC_PDF_READY_WEBHOOK_URL"
)

$missingVars = $requiredVars | Where-Object { -not $envVars[$_] }

if ($missingVars.Count -gt 0) {
    Write-Host "‚ùå Missing required environment variables: $($missingVars -join ', ')" -ForegroundColor Red
    Write-Host "‚ÑπÔ∏è  Please add these variables to your .env.local file" -ForegroundColor Blue
    Write-Host "‚ÑπÔ∏è  Refer to MAKECOM_ALIGNMENT_SETUP.md for details" -ForegroundColor Blue
    exit 1
}

Write-Host "‚úÖ All required environment variables found" -ForegroundColor Green

# Validate webhook URLs
Write-Host "`nüîó Validating webhook URLs..." -ForegroundColor Cyan

$webhookUrls = @{
    "Main Contract Generation" = $envVars.MAKE_WEBHOOK_URL
    "PDF Ready Notification" = $envVars.PDF_READY_WEBHOOK_URL
}

foreach ($name in $webhookUrls.Keys) {
    $url = $webhookUrls[$name]
    if (-not $url -or $url -match "YOUR_" -or $url -match "your-") {
        Write-Host "‚ö†Ô∏è  $name webhook URL appears to be a placeholder" -ForegroundColor Yellow
        Write-Host "‚ÑπÔ∏è  Please update $name webhook URL in .env.local" -ForegroundColor Blue
    } else {
        Write-Host "‚úÖ $name webhook URL configured" -ForegroundColor Green
    }
}

# Test webhook connectivity
Write-Host "`nüß™ Testing webhook connectivity..." -ForegroundColor Cyan

$testData = @{
    contract_id = "test-$(Get-Date -Format 'yyyyMMddHHmmss')"
    contract_number = "TEST-$(Get-Date -Format 'yyyyMMddHHmmss')"
    contract_type = "full-time-permanent"
    promoter_id = "test-promoter"
    first_party_id = "test-client"
    second_party_id = "test-employer"
    job_title = "Software Developer"
    department = "IT"
    work_location = "Remote"
    basic_salary = 1000
    currency = "OMR"
    contract_start_date = "2024-01-01"
    contract_end_date = "2024-12-31"
    special_terms = "Test contract generated by setup script"
} | ConvertTo-Json

if ($envVars.MAKE_WEBHOOK_URL -and $envVars.MAKE_WEBHOOK_URL -notmatch "YOUR_") {
    Write-Host "‚ÑπÔ∏è  Testing main contract generation webhook..." -ForegroundColor Blue
    
    try {
        $response = Invoke-RestMethod -Uri $envVars.MAKE_WEBHOOK_URL -Method POST -Body $testData -ContentType "application/json" -TimeoutSec 30
        Write-Host "‚úÖ Main webhook test successful" -ForegroundColor Green
        Write-Host "‚ÑπÔ∏è  Response: $($response | ConvertTo-Json -Compress)" -ForegroundColor Blue
    } catch {
        Write-Host "‚ùå Main webhook test failed" -ForegroundColor Red
        Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "‚ö†Ô∏è  Skipping main webhook test (URL not configured)" -ForegroundColor Yellow
}

# Check contract type configuration
Write-Host "`nüìù Checking contract type configuration..." -ForegroundColor Cyan

$configPath = Join-Path $PWD "lib\contract-type-config.ts"
if (Test-Path $configPath) {
    $configContent = Get-Content $configPath -Raw
    
    if ($configContent -match "YOUR_MAKECOM_TEMPLATE_ID" -or $configContent -match "YOUR_GOOGLE_DOCS_TEMPLATE_ID") {
        Write-Host "‚ö†Ô∏è  Contract type configuration contains placeholder template IDs" -ForegroundColor Yellow
        Write-Host "‚ÑπÔ∏è  Please update template IDs in lib/contract-type-config.ts" -ForegroundColor Blue
    } else {
        Write-Host "‚úÖ Contract type configuration appears to be updated" -ForegroundColor Green
    }
} else {
    Write-Host "‚ö†Ô∏è  Contract type configuration file not found" -ForegroundColor Yellow
}

# Generate test commands
Write-Host "`nüîß Generating test commands..." -ForegroundColor Cyan

Write-Host "‚ÑπÔ∏è  You can test your integration with these commands:" -ForegroundColor Blue
Write-Host ""

if ($envVars.MAKE_WEBHOOK_URL -and $envVars.MAKE_WEBHOOK_URL -notmatch "YOUR_") {
    Write-Host "PowerShell Test Command:" -ForegroundColor Yellow
    Write-Host "`$testData = @{`n  contract_id = 'test-001'`n  contract_number = 'TEST-001'`n  contract_type = 'full-time-permanent'`n  # ... other fields`n} | ConvertTo-Json" -ForegroundColor Gray
    Write-Host "Invoke-RestMethod -Uri '$($envVars.MAKE_WEBHOOK_URL)' -Method POST -Body `$testData -ContentType 'application/json'" -ForegroundColor Gray
    Write-Host ""
}

# Next steps
Write-Host "`nüöÄ Next steps:" -ForegroundColor Cyan

Write-Host "‚ÑπÔ∏è  1. Create Make.com scenarios as described in MAKECOM_ALIGNMENT_SETUP.md" -ForegroundColor Blue
Write-Host "‚ÑπÔ∏è  2. Update webhook URLs in .env.local with your actual Make.com webhook URLs" -ForegroundColor Blue
Write-Host "‚ÑπÔ∏è  3. Create Google Docs templates and update template IDs" -ForegroundColor Blue
Write-Host "‚ÑπÔ∏è  4. Test contract generation through the web interface" -ForegroundColor Blue
Write-Host "‚ÑπÔ∏è  5. Monitor Make.com scenario executions" -ForegroundColor Blue

Write-Host ""
Write-Host "‚úÖ Make.com integration setup check completed!" -ForegroundColor Green
Write-Host "‚ÑπÔ∏è  Refer to MAKECOM_ALIGNMENT_SETUP.md for detailed setup instructions" -ForegroundColor Blue
