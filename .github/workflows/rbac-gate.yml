name: RBAC Gate

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  rbac-checks:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      RBAC_ENFORCEMENT: enforce
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: RBAC Drift Check
        run: npm run rbac:drift
        continue-on-error: false
        
      - name: RBAC Guard Lint
        run: npm run rbac:lint
        continue-on-error: false
        
      - name: RBAC Tests (enforce mode)
        run: npm run rbac:test
        continue-on-error: false
        
      - name: Upload RBAC reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rbac-reports
          path: |
            docs/rbac_drift_report.md
            docs/rbac_guard_lint.md
            docs/rbac_release_readiness.md
            
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## üõ°Ô∏è RBAC Gate Results\n\n';
            
            try {
              // Read drift report
              const driftReport = fs.readFileSync('docs/rbac_drift_report.md', 'utf8');
              const p0Match = driftReport.match(/üî¥ P0 Critical: (\d+) permissions used in code but NOT seeded/);
              const p0Count = p0Match ? parseInt(p0Match[1]) : 0;
              
              if (p0Count === 0) {
                comment += '‚úÖ **RBAC Drift Check**: PASSED (0 P0 critical issues)\n';
              } else {
                comment += `‚ùå **RBAC Drift Check**: FAILED (${p0Count} P0 critical issues)\n`;
              }
              
              // Read guard lint report
              const guardReport = fs.readFileSync('docs/rbac_guard_lint.md', 'utf8');
              const criticalMatch = guardReport.match(/üî¥ Critical Issues: (\d+)/);
              const criticalCount = criticalMatch ? parseInt(criticalMatch[1]) : 0;
              
              if (criticalCount === 0) {
                comment += '‚úÖ **RBAC Guard Lint**: PASSED (0 critical guard issues)\n';
              } else {
                comment += `‚ùå **RBAC Guard Lint**: FAILED (${criticalCount} critical guard issues)\n`;
              }
              
              comment += '\n---\n';
              comment += 'üìä **Full reports available in workflow artifacts**\n';
              
              if (p0Count === 0 && criticalCount === 0) {
                comment += '\nüéâ **RBAC Gate: PASSED** - Ready for production deployment!';
              } else {
                comment += '\nüö® **RBAC Gate: FAILED** - Fix issues before merging.';
              }
              
            } catch (error) {
              comment += '‚ö†Ô∏è **Error reading reports**: ' + error.message + '\n';
              comment += 'üö® **RBAC Gate: FAILED** - Unable to verify RBAC status.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
